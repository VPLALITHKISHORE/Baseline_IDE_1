"use client"

import { Button } from "@/components/ui/button"
import { Card } from "@/components/ui/card"
import { Download, FileText, Share2 } from "lucide-react"
import { type DetectedFeature, getBaselineStatus } from "@/lib/feature-detector"

interface ExportReportProps {
  features: DetectedFeature[]
  fileName: string
}

export function ExportReport({ features, fileName }: ExportReportProps) {
  const stats = getBaselineStatus(features)

  const generateHTMLReport = () => {
    const date = new Date().toLocaleDateString()
    const compatibilityScore = features.length > 0 ? Math.round((stats.widelyAvailable / stats.total) * 100) : 100

    const html = `<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Baseline Compatibility Report - ${fileName}</title>
  <style>
    * { margin: 0; padding: 0; box-sizing: border-box; }
    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
      line-height: 1.6;
      color: #333;
      max-width: 1200px;
      margin: 0 auto;
      padding: 2rem;
      background: #f5f5f5;
    }
    .header {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
      padding: 2rem;
      border-radius: 12px;
      margin-bottom: 2rem;
    }
    .header h1 { font-size: 2rem; margin-bottom: 0.5rem; }
    .header p { opacity: 0.9; }
    .score-card {
      background: white;
      padding: 2rem;
      border-radius: 12px;
      box-shadow: 0 2px 8px rgba(0,0,0,0.1);
      margin-bottom: 2rem;
      text-align: center;
    }
    .score {
      font-size: 4rem;
      font-weight: bold;
      color: ${compatibilityScore >= 80 ? "#10b981" : compatibilityScore >= 60 ? "#f59e0b" : "#ef4444"};
    }
    .stats {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 1rem;
      margin-bottom: 2rem;
    }
    .stat-card {
      background: white;
      padding: 1.5rem;
      border-radius: 12px;
      box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    }
    .stat-card h3 { font-size: 0.875rem; color: #666; margin-bottom: 0.5rem; }
    .stat-card .value { font-size: 2rem; font-weight: bold; }
    .widely { color: #10b981; }
    .newly { color: #f59e0b; }
    .limited { color: #ef4444; }
    .features {
      background: white;
      padding: 2rem;
      border-radius: 12px;
      box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    }
    .features h2 { margin-bottom: 1.5rem; }
    .feature {
      padding: 1rem;
      border-bottom: 1px solid #e5e5e5;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    .feature:last-child { border-bottom: none; }
    .feature-name { font-weight: 500; }
    .feature-line { color: #666; font-size: 0.875rem; }
    .badge {
      padding: 0.25rem 0.75rem;
      border-radius: 9999px;
      font-size: 0.75rem;
      font-weight: 600;
    }
    .badge-widely { background: #d1fae5; color: #065f46; }
    .badge-newly { background: #fef3c7; color: #92400e; }
    .badge-limited { background: #fee2e2; color: #991b1b; }
    .footer {
      margin-top: 2rem;
      text-align: center;
      color: #666;
      font-size: 0.875rem;
    }
  </style>
</head>
<body>
  <div class="header">
    <h1>Baseline Compatibility Report</h1>
    <p>File: ${fileName} | Generated: ${date}</p>
  </div>

  <div class="score-card">
    <div class="score">${compatibilityScore}%</div>
    <p style="color: #666; margin-top: 0.5rem;">Compatibility Score</p>
  </div>

  <div class="stats">
    <div class="stat-card">
      <h3>Total Features</h3>
      <div class="value">${stats.total}</div>
    </div>
    <div class="stat-card">
      <h3>Widely Available</h3>
      <div class="value widely">${stats.widelyAvailable}</div>
    </div>
    <div class="stat-card">
      <h3>Newly Available</h3>
      <div class="value newly">${stats.newlyAvailable}</div>
    </div>
    <div class="stat-card">
      <h3>Limited Availability</h3>
      <div class="value limited">${stats.limitedAvailability}</div>
    </div>
  </div>

  <div class="features">
    <h2>Detected Features</h2>
    ${features
      .map(
        (feature) => `
      <div class="feature">
        <div>
          <div class="feature-name">${feature.name}</div>
          <div class="feature-line">Line ${feature.line} | ${feature.type}</div>
        </div>
        <span class="badge badge-${feature.status === "widely_available" ? "widely" : feature.status === "newly_available" ? "newly" : "limited"}">
          ${feature.status.replace("_", " ")}
        </span>
      </div>
    `,
      )
      .join("")}
  </div>

  <div class="footer">
    <p>Generated by Baseline IDE | Powered by Web Platform Dashboard API</p>
    <p style="margin-top: 0.5rem;">Learn more at <a href="https://web.dev/baseline" style="color: #667eea;">web.dev/baseline</a></p>
  </div>
</body>
</html>`

    return html
  }

  const handleExportHTML = () => {
    const html = generateHTMLReport()
    const blob = new Blob([html], { type: "text/html" })
    const url = URL.createObjectURL(blob)
    const a = document.createElement("a")
    a.href = url
    a.download = `baseline-report-${fileName.replace(/\.[^/.]+$/, "")}-${Date.now()}.html`
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)
  }

  const handleExportJSON = () => {
    const report = {
      fileName,
      generatedAt: new Date().toISOString(),
      stats,
      features: features.map((f) => ({
        name: f.name,
        type: f.type,
        line: f.line,
        status: f.status,
        description: f.description,
        browserSupport: f.browserSupport,
        baselineDate: f.baselineDate,
      })),
    }

    const blob = new Blob([JSON.stringify(report, null, 2)], { type: "application/json" })
    const url = URL.createObjectURL(blob)
    const a = document.createElement("a")
    a.href = url
    a.download = `baseline-report-${fileName.replace(/\.[^/.]+$/, "")}-${Date.now()}.json`
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)
  }

  const handleShare = async () => {
    const text = `Baseline Compatibility Report for ${fileName}

Compatibility Score: ${features.length > 0 ? Math.round((stats.widelyAvailable / stats.total) * 100) : 100}%

Features Detected: ${stats.total}
✅ Widely Available: ${stats.widelyAvailable}
⚠️ Newly Available: ${stats.newlyAvailable}
❌ Limited Availability: ${stats.limitedAvailability}

Generated by Baseline IDE`

    if (navigator.share) {
      try {
        await navigator.share({
          title: "Baseline Compatibility Report",
          text,
        })
      } catch (error) {
        // User cancelled or share failed
        console.log("Share cancelled")
      }
    } else {
      // Fallback: copy to clipboard
      await navigator.clipboard.writeText(text)
      alert("Report summary copied to clipboard!")
    }
  }

  return (
    <Card className="p-4 space-y-3">
      <div className="flex items-center gap-2">
        <FileText className="h-5 w-5 text-primary" />
        <h3 className="font-semibold">Export Report</h3>
      </div>

      <p className="text-sm text-muted-foreground">
        Generate shareable compatibility reports for your team or stakeholders
      </p>

      <div className="flex gap-2 flex-wrap">
        <Button onClick={handleExportHTML} className="gap-2">
          <Download className="h-4 w-4" />
          Export HTML
        </Button>
        <Button onClick={handleExportJSON} variant="outline" className="gap-2 bg-transparent">
          <Download className="h-4 w-4" />
          Export JSON
        </Button>
        <Button onClick={handleShare} variant="outline" className="gap-2 bg-transparent">
          <Share2 className="h-4 w-4" />
          Share
        </Button>
      </div>
    </Card>
  )
}
